[
{
	"uri": "/",
	"title": "Main Page",
	"tags": [],
	"description": "",
	"content": " Accelerate your cloud migration and modernize your workloads with AWS and Dynatrace Cloud is essential to your business strategy and a smooth transition is key. Join Dynatrace and AWS for a hands-on workshop to learn how to gain advanced observability automatically at scale as you prepare to move to the cloud, iterate and migrate more applications, and gain the benefits of modern cloud native architectures and operating models.\nThis workshop puts you in the shoes of an engineer at the easyTravel corporation, presenting you with various problems the company is facing as they migrate to AWS and modernize their applications. It will be your task to solve them.\nFortunately for you, the team has chosen Dynatrace and AWS and you will work side by side with the easyTravel team to provision AWS resources, install and use Dynatrace to understand the full-stack metrics that are captured, and get answers!\nYou can expect to learn how to:  Automatically discover applications, services, processes, hosts and build a complete dependency map for the entire application environment Achieve full end-user, application and infrastructure visibility for BOTH your classic, on-premises systems AND your modern cloud environments with a single solution Significantly reduce troubleshooting time by letting AI automatically detect problems and pinpoint the root cause, explaining business impact with no manual configurations Ensure your customers are not impacted or disrupted by the migration to AWS and the modernization of applications and infrastructure Capture and analyze transactions end-to-end across every tier of technology stack, from the browser all the way down to the code and database level Eliminate meaningless alerts and alert fatigue from disparate tools  Who should attend:  Anyone championing their modernization journey Application teams  Architects  Developers Technical leads Operations Engineers Infrastructure Teams   We require every attendee to:  Have their own Dynatrace SaaS or Managed Account Use the AWS account Be able to run basic Unix commands  "
},
{
	"uri": "/100_wrapup/10_cleanup.html",
	"title": "AWS Cleanup",
	"tags": [],
	"description": "",
	"content": " In order to prevent charges to your subscription we recommend cleaning up the infrastructure that was created. If you plan to keep things running so you can examine the workshop a bit more please remember to do the cleanup when you are done. It is very easy to leave things running in an AWS subscription, forget about it, and then accrue charges.\n Delete Service Principal The Dynatrace AWS monitor setup also made a Service Principal that is used to pull data. In the AWS portal, the term App registration is used.\n1 . First navigate to the App registration page and click on the entry with AWS-modernize-workshop-sp in the name\n2 . Then just click delete\nDelete resource group You just need to delete the resource group named AWS-modernize-workshop and all the AWS resources will be deleted.\n1 . Open the resource group page. One way is to just search for it\n2 . Open the resource group named AWS-modernize-workshop\n3 . Click the Delete resource group button and retype the name to confirm the delete.\nThats it! All cleaned up The delete will take 5-10 minutes.\n "
},
{
	"uri": "/10_prerequisites/10_dynatrace.html",
	"title": "Dynatrace",
	"tags": [],
	"description": "",
	"content": " To complete the workshop, you first need a Dynatrace tenant to monitor AWS resources and completed the workshop exercises. Please choose the link from one of the following options:\nOption 1: I need a Dynatrace tenant Navigate to Sign up for a 15-day trial\nOption 2: I already have a Dynatrace tenant You will need admin rights to configure configuration rules and install agents. Ensure you have authority within your organization to do this in your tenant.\n If you are running the workshop on your own Dynatrace tenant, then navigate to: AWS prerequisites step.\n"
},
{
	"uri": "/30_assessment/10_dynatrace_oneagent.html",
	"title": "Dynatrace OneAgent",
	"tags": [],
	"description": "",
	"content": "Dynatraces OneAgent provides the industry’s largest technology coverage, spanning cloud native to legacy environments in an all-in-one solution. OneAgent provides:\n A set of specialized processes that run on each monitored host. OneAgent collects metrics from the operating system it runs on and compares the metrics to performance metrics. The metrics are then reported to Dynatrace. Monitors technologies like Java, Node.js, .NET and more in greater detail by injecting itself into processes and monitors performance with code level insights. Delivers Real User Monitoring by injecting a JavaScript tag into the HTML of each application page that is rendered by your web servers.  The OneAgent can be automatically installed and rolled out through configuration management tools such as Chef, Puppet, Ansible, AWS extentions using the AWS portal, AWS CLI, Powershell, ARM templates or by just including the download and install into any custom deployment script.\nYou can review the process to manually install and try it on one of your hosts with this guide.\n "
},
{
	"uri": "/40_adopt/10_identify.html",
	"title": "Identify",
	"tags": [],
	"description": "",
	"content": " EasyTravel is a monolithic Java application that as we saw earlier provides several web services like Booking, Authentication, and Journey.\nOur overall goal at easyTravel is to breakout each of these backend services into seperate services. This will allow us to have seperate Continuous Integration (CI) pipelines to build and test each service independantly. By putting these service into Docker images, we gain the ability to deploy the service into modern platforms like Kubernetes using AWS managed services. By adding Continous Deployment (CD) to our process, we will vastly increase our ability to delivery features faster to our customers.\nIdentify checkDestination to become a microservices For this review, we are going to focus on the JourneyService.\nReferring to the picture above, notice how the INTERMEDIATE STEP show the JourneyService resulting in two services:\n JourneyService checkDestination  As the lead developer, Henrik knows that within the code the checkDestination is a seperate Java methods and he would like to understand how often it gets called and the typical response times. This will help establish the Services Levels that will be required for monitoring and sizing.\nThe Setup Dynatrace automatically detects and monitors most server-side services in your environment with no configuration required. If your application doesn’t rely on standard frameworks, you can set up custom services.\nWith a custom service you can instruct Dynatrace which method, class, or interface it should use to gain access to each of your application’s custom server-side services.\nHenrik knows the Java class and method within the JourneyService` and configured this custom service.\nDuring the workshop provisioning we used the Dynatrace API to add this configuration. Navigate to the (Settings –\u0026gt; Server-side service monitoring –\u0026gt; custom service detection) to check it out.\n Service Review 1 . In Dynatrace, open the transactions and services page from the the left side menu.\n2 . Use the Management Zones filter to pick the ez-travel option\nDuring the workshop provisioning we used the Dynatrace Management Zones API to add this configuration. Navigate to (Settings –\u0026gt; Preferences –\u0026gt; Management Zones) to check it out.\n 3 . Use the Technology filter choosing the Apache Tomcat option. From the list, pick the JourneyService\n4 . On the Journey service page, click the View service flow button. Go ahead and change the Throughput view and expand the CheckDestination service to see the Request and response time details.\nWhat did we learn The CheckDestination service is called nearly each invocation to the JourneyService and its not a high contributor to overall time. So Henrik now has the informaton he needs to make smarter re-architecture and re-platforming decisions\n"
},
{
	"uri": "/120_more/10_agent_install.html",
	"title": "OneAgent Manual Install",
	"tags": [],
	"description": "",
	"content": " OneAgent is responsible for collecting all monitoring data within your monitored environment. A single OneAgent per host is required to collect all relevant monitoring data—even if your hosts are deployed within Docker containers, microservices architectures, or cloud-based infrastructure.\nThe OneAgent can be automatically installed and rolled out through configuration management tools such as Chef, Puppet, Ansible, AWS extentions \u0026amp; AWS Resource Management (ARM) templates or by just including the download and install into any custom deployment script.\nTo show how easy it is, lets do a quick Dynatrace OneAgent install directly on a host.\nLets Start 1 . If you are not already there, first login into your Dynatrace environment\nYou can always login to your tenant using the URL https://[your tenant].live.dynatrace.com or by using the the SaaS login link on the top right of the Dynatrace home page https://www.dynatrace.com.\n 2 . From the left side menu on the bottom, choose ‘deploy dynatrace’ link to open the view below. Once on that screen, click the start installation button.\n3 . Select the linux button\n4 . You will now see the unix commands that we simply copy and run within the VM. Note that the installer is configured just to call the API against your Dynatrace environment.\n5 . Now you need to connect to the VM using SSH.\n6 . Now copy the wget -O Dynatrace-OneAgent-Linux\u0026hellip; command from the Dynatrace Installer OneAgent page and paste back to the Unix session at the command line and run it.\n7 . You can run or skip the second command to verify the signature.\n8 . Copy the command to install the OneAgent and paste back to the Unix session.\nYou may have to prefix the installation command with sudo.\n For example:\nsudo /bin/sh Dynatrace-OneAgent-Linux-1.193.81.sh --set-app-log-content-access=true --set-infra-only=false  When the install is complete you should see a message with the last lines that look like this:\nDynatrace OneAgent has successfully connected to Dynatrace Cluster Node https://ENVIRONMENTID.live.dynatrace.com:443/communication. You are all set. The Dynatrace OneAgent is fully operational.  9 . Back in the Dyntrace Installer OneAgent page, click the ‘show deployment status’ button to review the OneAgent status.\nThe host and processes are now monitored including many metrics like host CPU and metrics for each process discovered. But in order to get ‘deep’ visibility into code execution and transactions, you may need to restart the application. Upon restart, the OneAgent will automatically load into each process. The good news is that it does this without any changes to your code or your startup scripts.\nHere is an example with some warnings, that is OK. We just simply restart the application.\nOnce the OneAgent is fully in place, the Dynatrace deployment status should now look like this:\nNow give it a try on some of your hosts!! "
},
{
	"uri": "/10_prerequisites.html",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": " Prerequisites Meet Jess from the easyTravel team who will help you setup Dynatrace, AWS, and easyTravel. You need all of these in place before you are presented with the various scenarios for the problems that the easyTravel team is relying on you to solve.\nObjectives of this section 🔹 Ensure your Dynatrace account is ready\n🔹 Ensure your AWS subscription is ready\n🔹 Create and gather Dynatrace URLs \u0026amp; Tokens\n🔹 Provision easyTravel application\n"
},
{
	"uri": "/50_operate/10_simplify_operations.html",
	"title": "Simplify Operations",
	"tags": [],
	"description": "",
	"content": "Migrating to the cloud means there are more moving pieces to monitor and manage. As we have learned, Dynatrace fully automates monitoring through OneAgent and the native integration with AWS.\nPost-migration, Dynatrace’s deterministic AI engine, DAVIS, helps you run your applications smoothly, pinpointing production issues with root-cause information right at your fingertips. DAVIS leverages Smartscape dependency data, as well as the high-fidelity monitoring data from OneAgent. The AI can be fed with external events such as deployment or configuration change events from your CI/CD or deployment automation tools.\nDAVIS’ unique capabilities for automated root cause detection can be integrated with ChatOps, VoiceOps, or auto-remediation actions. This brings your operation teams closer to what we call Autonomous Operations and enables business teams to make better decisions based on monitoring data by using voice or chat commands.\n"
},
{
	"uri": "/20_introduction/10_why_dynatrace.html",
	"title": "Why Dynatrace",
	"tags": [],
	"description": "",
	"content": " Meet Pravin, easyTravels CTO, who will share the teams approach migrating to AWS and why they choose Dynatrace as strategic partner for this journey.\nEnterprise Cloud is underpinning our digital transformation At easyTravel, enterprise cloud brings a great deal of change for it is all:\n completely software driven (including the infrastructure). dynamic and built on a complex ecosystem of micro services and containers running at massive scale spanning across multiple cloud environments and data centers constantly changing at a pace faster than ever before.  All of this is madness is necessary because the expectations of our users is higher than ever. And we, the IT professionals at easyTravel, need to deliver a perfect user experience. Every time.\nThese factors drove us to completely rethink and revaluate our strategy for monitoring and observability and we must:\n have visibility into what exists and what needs to be moved ensure that migration goes according to the plan run our applications smoothly post migration  Why Dynatrace Dynatrace’s an all-in-one platform with AI at the core delivers the best in class APM, infrastructure monitoring, digital experience management, and digital business analytics with AIOps built in. Dynatrace OneAgent auto-discovers what’s in our environment, it sees how everything interacts so it can build connective tissue that is the Smartscape dependency map.\nKnowing that Gartner has ranked Dynatrace as a leader in their magic quadrant for Application Performance Monitoring for the 10th consecutive time gives us confidence that we have picked the right partner. In particular, advanced obserability, Davis AI engine, and complete automation all support our new strategy.\nAdvanced observability What we gain is advanced observability across cloud and hybrid environments, from microservices to mainframe. Automatic full-stack instrumentation, dependency mapping and AI-assisted answers detailing the precise root-cause of anomalies, eliminating redundant manual work, and letting you focus on what matters, delivering instant answers across the full stack.\nDynatrace isn’t just 3 separate pillars. It auto-discovers what’s in our environment, it sees how everything interacts so it can build the connective tissue that is the SmartScape dependency map. When you layer in the digital user experience and the Davis AI-assistant, you have a complete, highly automated, advanced observability platform.\nComplete automation This process is completely automated and requires no manual effort to setup in particular with the Dynatrace OneAgent that makes it super easy to capture high fidelity data across your full stack of technology.\nRadically different AI engine Because of this rich and connected data set, end to end transaction capture, and real-time map of your entire enterprise you can leverage AI algorithms to perform the automation such as:\n Automatically process billions of dependencies Detecting problems automatically (no configuration required) Determine the business impact of problems automatically Determine the root cause of problems automatically And more  "
},
{
	"uri": "/20_introduction/20_cloud_adoption_framework.html",
	"title": "Cloud Adoption Framework",
	"tags": [],
	"description": "",
	"content": "We at easyTravel have embraced AWS proven guidance found within the Microsoft Cloud Adoption Framework that is designed to help create and implement the business and technology strategies necessary to succeed in the cloud.\nThe Cloud Adoption Framework provides us with the best practices, documentation, and tools that cloud architects, IT professionals, and business decision makers need to successfully achieve short-term and long-term objectives.\nBy leveraging Dynatrace we see the value in each phase:\n Pre-Migration (Planning): Automatically generate a blueprint of existing infrastructure, services and the application landscape thanks to Dynatrace Smartscape Technology. Dynatrace baselines existing on-premise applications, automatically detects all dependencies (internal as well as external) and calculates current resource consumption. Additionally Dynatrace allows for “virtual” monolith to microservice migration planning without code changes. This enables us to make smarter re-architecture and re-platforming decisions based on the existing on-premise workload. In-Migration (Readiness \u0026amp; Adoption): Dynatrace monitors the progress of shifting workloads to the cloud. It helps us make better decisions on what to move when based on how tightly coupled services are and on the automatic baseline comparison between pre-migration and in-migration Post-Migration (Manage): AI-supported baselining on the migrated services allows for validating the success of the migration project from a performance, resource and cost perspective. Live performance insights into the full stack allows us to dynamically scale and implement auto-mitigation strategies!  With these capabilites, Dynatrace helps ensure a successful cloud migration to Microsoft AWS by reducing risk, moving faster and achieving a better business outcome for our cloud migration projects.\n"
},
{
	"uri": "/100_wrapup/20_dynatrace.html",
	"title": "Dynatrace",
	"tags": [],
	"description": "",
	"content": "You have a fully feature enabled 15 day Dynatrace trial, so keep using it to monitor and manage your infrastructure and applications!!\nHere are resources to get your started:\n Learn more about your tenant and install more OneAgents Add other users to your tenant YouTube Videos More Support resources  "
},
{
	"uri": "/50_operate/20_how_davis_works.html",
	"title": "How Davis Works",
	"tags": [],
	"description": "",
	"content": " Davis is Dynatrace’s AI engine that is purpose-built for today’s web-scale enterprise clouds. Davis analyzes complex dependencies, creates application topology dynamically and helps you in anomaly detection.\n1. Intelligent anomaly detection\nProblems in Dynatrace represent anomalies, i.e. deviations from a normal behavior or state. Such anomalies can be, for example, a slow service or a slow user login to an application. Whenever a problem is detected, Dynatrace raises a specific problem event indicating such an anomaly.\n2. Smart Baselines \u0026amp; Problems\nContext-rich data collection and baselining are the two fundamental pillars that anomaly detection is built on. A huge amount of high-quality and accurate data is necessary to determine baselines that can effectively be used to distinguish between normal and anomalous situations.\nDynatrace uses a sophisticated AI causation engine, called Davis, to automatically detect performance anomalies in your applications, services, and infrastructure. Dynatrace “problems” are used to report and alert on abnormal situations, such as performance degradations, improper functionality, or lack of availability (i.e., problems represent anomalies in baseline system performance).\n3. Causation versus correlation\nDavis uses deterministic AI which is a radically different approach to traditional machine learning. It performs an automatic fault-tree analysis, the same methodology NASA and the FAA are using. This is causation not correlation. The resulting root cause analysis is precise and reproducible step by step.\nHow Dynatrace Davis analyzes a critical situation Davis processes all data, whether it comes from a mainframe, the infrastructure, a cloud platform or the CI/CD pipeline. This enables Davis to provide the granularity and precision needed to automate the enterprise cloud, unlike traditional AI.\n Automatic detection of topology and communications - As Oneagent constantly discovers new resources in the environment and builds it into the topology maps. The direction of the communication is shown by the arrow with solid line between entities representing active communication. Metric and event-based detection of abnormal component states - The new AI engine automatically checks all component metrics for suspicious behavior. This involves the near real-time analysis of thousands of topologically related metrics per component and even your own custom metrics.  Problem Card This is an example of Dynatrace in action where Davis detected a problem. It’s showing the business impact and root cause of the issue in a simple, straight-forward way that everybody understands.\nAll the high-fidelity data collected by OneAgent is constantly ingested into the AI and through that deterministic AI capabilities Dynatrace identifies the actual root cause with unmatched precision. Davis also helps in providing you the business impact analysis in terms of applications, services, infrastructure components and the real users impacted by a certain anomaly.\nYour Problem Page The problem we enabled earlier at the end of the Assessment section should be there now. Navigate to the Problem Dashboard from the menu or the RED icon on the top right of the Dynatrace page.\n"
},
{
	"uri": "/20_introduction.html",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Introducing the easyTravel team The easyTravel Corporation just started their journey to modernize and move to a bigger cloud infrastructure footprint with the goal of more agility and efficiency to optimize workloads, innovate faster, and deliver optimal user experiences. But, with the market downturn in travel bookings, the team must still modernize and do more with less.\nEasyTravel’s flagship product is their customer facing website where customers can search and book travel. In establishing their modernization goals, the team identified these specific problem areas to address as part of their journey:\n Lack answers for planning – The easyTravel application has been built over time and is managed with a patchwork of different legacy and open source infrastructure monitoring tools. As the team is starting to plan their modernization migration strategy, they have no easy way to answer key questions needed for planning: What technologies do we have? What are the best candidates to move? What can’t be moved because of insufficient support? What are the dependencies to other applications and services?\n Don’t understand application usage and requirements – In addition to not fully understanding the blueprint for the existing application and infrastructure landscape, the team does not fully know how the end-user traffic patterns map to the resource consumption patterns of services as to properly answer: what will it cost to run in the cloud? What network traffic will there be between the services we migrate and those that have to stay in the current data center?\n How to ensure Service Levels – Given the business challenges of the slower market, the last thing IT needs to do is cause an outage or create performance issues as services are moving and being replaced with cloud services. Currently, there is no unified view across on-prem, cloud apps and infrastructure, so it’s hard to know how the application and underlying services are behaving during and post migration.\n Too much time looking for root cause – The team has quickly learned that building out more cloud infrastructure, where everything is virtualized and dynamic, causes interdependencies to go way up, adding more layers of complexity. The result is that different teams from Ops and Apps and even Biz must get involved to review multiple tools, dashboards and logs and that translates a lot of time and resources wasted on troubleshooting.\n  Objectives of this section 🔹 Understand why the easyTravel team picked Dynatrace\n🔹 Understand the areas where Dynatrace helps Microsoft Cloud Adoption journeys\n"
},
{
	"uri": "/30_assessment/20_review_eztravel.html",
	"title": "Review easyTravel",
	"tags": [],
	"description": "",
	"content": " 1 . Open the AWS portal (http://portal.AWS.com) and open the Virtual Machine (VM) page. One way to do this is search for virtual machines\n2 . Open the VM called workshop-ez-1. On the VM overview page, you can see that this is a Linux (ubuntu 18.04) host.\nDynatrace OneAgent In addition to installing easyTravel on this host, the AWS CLI was used to install the Dynatrace OneAgent AWS VM extension.\nTo see what was installed, click the Extensions host menu.\nHere is the AWS CLI command that was used:\naz vm extension set \\ --publisher dynatrace.ruxit \\ --name \u0026quot;$AGENT\u0026quot; \\ --resource-group \u0026quot;$AWS_RESOURCE_GROUP\u0026quot; \\ --subscription \u0026quot;$AWS_SUBSCRIPTION\u0026quot; \\ --vm-name \u0026quot;$HOSTNAME\u0026quot; \\ --settings \u0026quot;{\\\u0026quot;tenantId\\\u0026quot;:\\\u0026quot;$DT_ENVIRONMENT_ID\\\u0026quot;,\\\u0026quot;token\\\u0026quot;:\\\u0026quot;$DT_PAAS_TOKEN\\\u0026quot;, \\\u0026quot;server\\\u0026quot;:\\\u0026quot;$DT_BASEURL/api\\\u0026quot;, \\\u0026quot;hostGroup\\\u0026quot;:\\\u0026quot;$HOSTGROUP_NAME\\\u0026quot;}  Learn more about the Dyntrace AWS extentions using the AWS portal, AWS CLI, Powershell, ARM templates in the Dynatrace documentation\n Open the easyTravel application 1 . On the right side of overview page, use the copy button to copy the “public IP” for this VM.\n2 . Then in a Browser, visit http://PUBLIC-IP to view the EasyTravel application. You should see a webpage that looks like this:\nIf the application does not appear, then verify the provisionAWSWorkshop.sh script has completed.\n "
},
{
	"uri": "/40_adopt/20_scale.html",
	"title": "Scale",
	"tags": [],
	"description": "",
	"content": " Due to the complexity and effort of refactoring a bunch of code, Henrik has decided to take a mixed cloud adoption strategy.\nThe intermediate step will be to support his developments efforts:\n Refactor the backend Java application to be packaged and served within a Docker image Rebuild relational in-memory Apache Derby database to Mongo  The final step be to put on AWS Kubernetes Service (AKS) and AWS Cosmos DB once the Cloud operations team has complete their certification of AKS and Cosmos.\nLets see what it looks like In Dynatrace, goto the hosts page and open the host with workshop-ez-docker-1 as the prefix. This VM was also provisioned earlier in this workshop. But this time, easyTravel was provisioned using Docker and Docker Compose. You can check out the docker-compose.yml file here\nNow instead of a bunch of standalone Java processes, the host page shows the detected Docker containers. And it did this with NO additonal configuration changes or changes to the Docker image!!\nGo ahead and click on the View container button to see an overview of each container.\nAlso, go back and click the of the processes like dynatrace/easytravel-frontend.\nHow Dynatrace monitors containers Dynatrace hooks into containers and provides code for injecting OneAgent into containerized processes.\nThere’s no need to modify your Docker images, modify run commands, or create additional containers to enable Docker monitoring. Simply install OneAgent on your hosts that serve containerized applications and services. Dynatrace automatically detects the creation and termination of containers and monitors the applications and services contained within those containers.\nYou can read more about Dynatrace Docker Monitoring here and technical details here\n Validate SLAs During the workshop provisioning we used the Dynatrace API to add Dashbaord that allows for a quick comparison of the non-Dockerized and Dockerized implementations of easyTravel.\nNavigate the dashboards from the left side menu to analyze volumes, response times, and load.\nHow this helps Dynatrace monitors the progress of shifting workloads to the cloud. It helps us make better decisions on what to move when based on how tightly coupled services are and on the automatic baseline comparison between pre-migration and in-migration.\n"
},
{
	"uri": "/10_prerequisites/20_dynatrace_trial.html",
	"title": "Sign up for Dynatrace Trial",
	"tags": [],
	"description": "",
	"content": "For this workshop you will use a 15-day free Dynatrace evaluation of the full feature set of our all-in-one performance monitoring platform. Once you sign up, you will be sent a confirmation email and it will then take about 5 minutes to provision your Dynatrace tenant.\nStart free trial   While the tenant is provisioning, be sure to watch this short Dynatrace overview video. \n"
},
{
	"uri": "/10_prerequisites/30_azure.html",
	"title": "AWS",
	"tags": [],
	"description": "",
	"content": " To complete the workshop, you will also need an AWS subscription to complete the workshop exercises. Please choose the link from one of the following options:\nOption 1: I have a Microsoft AWS Promo code To provision your subscription, navigate to Microsofts AWS Pass website\nUsing AWS Pass requires an email and the provisioning takes about 5 minutes to process.\n Option 2: I need an AWS subscription You can sign up for a free AWS trial account on the Microsofts website\nYou will be given $200 of credits from Microsoft as part of the trial, but you will be asked for a credit card to setup the account.\n Option 3: I already have an AWS subscription If you already have a AWS subscription, then navigate to the next section.\nUnless you have full admin rights in a non-production AWS subscription, we recommend you sign up for an AWS trial. This workshop requires admin rights to provision and remove resources so please ensure you have authority within your organization if you are using a subscription owned by your organization.\n "
},
{
	"uri": "/30_assessment.html",
	"title": "Assessment and planning",
	"tags": [],
	"description": "",
	"content": " Assessment and planning Meet Florian, one the architects assigned to choose the right strategies, such as rehosting or rearchitect, for migrating the easyTravel customer application to AWS. Florian knows there are different risks, costs, and benefits of these common adoption strategies.\nBut one big challenge Florian faces is that the previous architect is no longer with the company so all the details of what is where and what is dependent on what within the technical stack is missing or poorly documented. All that exists is a diagram and notes on a wiki page he found that was last updated in 2013.\nNot having enough details about the current environment is hindering easyTravels ability to make the right decisions when planning what to migrate and when.\nTo address this problem, you and Florian are going to install Dynatraces OneAgent to automatically discover the easyTravel application, services, processes, and build a complete dependency mapping for the entire application environment. So let’s begin!\nObjectives of this section 🔹 Review the Dynatrace OneAgent setup\n🔹 Review real-time data now available for the EZ-travel application\n🔹 Review how Dynatrace helps with Pre-Migration Planning\n"
},
{
	"uri": "/30_assessment/30_review_eztravel-host.html",
	"title": "Host and Smartscape",
	"tags": [],
	"description": "",
	"content": " Now lets review what the OneAgent automatically discovered using these various Dynatrace views:\n Host Smartscape Services and Service Flow Transactions and services Databases Technologies Host view  You should be on the host page, but if not, from the right hand menu in Dynatrace choose hosts then click on the host with the prefix of workshop-ez-1.\nOn host page, you will see basic infrastructure information for the host.\n Now expand the Properties section to see data about the host: Host resource metrics (CPU, memory) Host availability Discovered processes. In this case most of which are Java applications running in Tomcat.  Smartscape view Lets see how Dynatrace can visualize these processes using Smartscape.\n Just click on the ... box on the to the right of the host name pick Smartscape view menu option this will open Smartscape filtered to this VM  About Smartscape Smartscape is Dynatraces near real-time environment-topology visualization tool, is one of the most powerful features of Dynatrace. Smartscape auto-discovery delivers a quick and efficient visualization of all the topological dependencies in your infrastructure, processes, and services:\n On the horizontal axis, it visualizes all ingoing and outgoing call relationships within each tier On the vertical axis, it displays full-stack dependencies across all tiers  Datacenter Hosts Process Service Application   Enterprise have many hosts, services, and application that are ever changing. The ability to automatically discover and change as the environment changes is a key feature that Smartscape delivers.\nFeel free to explore the Smartscape.\nHow this helps Smartscape shows all the dependencies of a given service. Those include connections to queues, web servers, app servers, and a native process. This information allows us to better plan the migration, as all depending services must be considered during the migration.\n"
},
{
	"uri": "/40_adopt/30_summary.html",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": " While migrating to the cloud, you want to evaluate if your migration goes according to the plan, whether the services are still performing well or even better than before, and whether your new architecture is as efficient as the blueprint suggested. Dynatrace helps you validate all these steps automatically, which helps speed up the migration and validation process.\nHaving the ability to understand service flows enables us to make smarter re-architecture and re-platforming decisions.\nAs you have seen, Dynatrace has broad technology support and as things change, the views looks the same to you without configuration changes or additonal agents. Simplicity in action!!\nChecklist In this section, you should have completed the following:\n✅ Validate and Optimize Cloud Architecture\n✅ Validate Migration Progress\n✅ Validate Performance and Scalability\n"
},
{
	"uri": "/50_operate/30_summary.html",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": " What makes Dynatrace truly special and unique is Davis. Davis is the deterministic AI engine that automatically detects problems for you and pinpoints the root cause and explains the business impact without needing any manual configurations.\nAI-supported baselining on the migrated services allows for validating the success of the migration project from a performance, resource and cost perspective. Live performance insights into the full stack allows us to:\n Dynamically scale and implement auto-mitigation strategies! Eliminate meaningless alerts and alert fatigue from disparate tools Validating Application \u0026amp; Reduce MTTR with Automated Root Cause Diagnostics  Checklist In this section, you should have completed the following:\n✅ Understand how DAVIS identifies problems - learn about smart baselines\n✅ See a detailed example for problem and walk through what Davis found\n"
},
{
	"uri": "/40_adopt.html",
	"title": "Adopt",
	"tags": [],
	"description": "",
	"content": " Adopt: Migrate AND Innovate Re-hosting (also referred to as lift and shift) is a common migration use case. Re-architecture and Re-platform are steps that break the traditional monolithic architectures and replace individual components with cloud services, such as Amazon Relational Database Service (Amazon RDS), which replaces on-premises relational databases) and Amazon DynamoDB, which replaces NoSQL databases. These steps can also replace newly-developed microservices, including containerized or serverless.\nWe just learned how we can get great information on back-end services, front-end API services, or user-facing features using Dynatrace and OneAgent. This helps us now decide what individual features or complete applications based on business benefits we need to migrate and modernize. The idea here is to focus on feature-based business benefit with functional migration.\nMeet Henrik, from the development team who is leading the easyTravel modernization implementation and we will work together with him as he begins the journey to move from the current easyTravel monolith to microservices.\nObjectives of this section 🔹 Validate and Optimize Cloud Architecture\n🔹 Validate Migration Progress\n🔹 Validate Performance and Scalability\n"
},
{
	"uri": "/30_assessment/40_review_eztravel-process.html",
	"title": "Processes and Services",
	"tags": [],
	"description": "",
	"content": " In the Smartscape view, we saw the visualizations of the relationships in vertical stack and as well as the relationships spatially. Now lets view the process and service tiers to see the relationships from a single entity.\nLets return back to the host page where we will explore each of the tiers for the VM. To get back there, from the right hand menu in Dynatrace choose hosts then click on the host with the prefix of workshop-ez-1.\nNow on the host page, click on the com.dynatrace.easytravel.business.backend.jar easytravel-*-x* process in the Processes and Containers section.\nProcess view You should be on the process page where you will see information for this backend process.\n Expand the Properties to see data about the process such as JVM version and open ports Processs that call this process (Inbound) Services that are served by this process. In this case there are multiple Processs that this process calls (Outbound) Process specific metrics  Note that Dynatrace automatically recognizes many common process like Tomcat and will capture process specific metrics such as JVM garbage collection. See a list of supported technologies in the Dynatrace documentation\n View a Service Now lets review a specific service.\n Click the services square above the host infographic to open the list of services From the list of services, choose the BookingService  Service View You should be on the service page where you will see information for this specific service\n Expand the Properties to see data about the process such as JVM version and open ports Services that call this service (Inbound) Services that this service calls (Outbound)  Service level backtrace You should be on the service level backtrace page where you will see information for this specific service.\nDynatrace understands your applications transactions from end to end. This transactional insight is visualized several ways like the backtrace. The backtrace tree view represents the sequence of services that led to this service call, beginning with the page load or user action in the browser.\nFollow along using these numbers as reference:\n1 . This this the booking service\n2 . booking service is called by the Customer Frontend\n3 . Customer Frontend is a Tomcat Server\nNow lets see another visulization called the service flow. For this and refering to the picture above:\n4 . Click the ... in the row for the Customer Frontend\n5 . Choose the Service Flow menu item\nHow this helps The risk of moving specific components (host, database, processes, services, application) depends on the complexity and interdependency to the rest of the environment architecture. For example, before migrating a database we can look at Smartscape to understand which services are actively using this database and in which capacity.\n"
},
{
	"uri": "/10_prerequisites/40_workshop_setup.html",
	"title": "Workshop Setup",
	"tags": [],
	"description": "",
	"content": " In this section, your will complete the following:\n Open AWS Cloud Shell for running various UNIX commands Capture environment and token info needed for automation scripts Provision easyTravel application Verify EasyTravel application is running  1. Open AWS Cloud Shell 1 . Navigate to https://portal.AWS.com/\n2 . Click on the Cloud Shell button\nIf you get this prompt, choose bash\nIf you get this prompt, choose AWS Pass - Sponsorship and then click the Create Storage button.\nCreating the storage will take about a minute.\n 3 . You should see the bash shell.\n4 . Make a dedicated AWS shell Browser tab by clicking this new tab icon.\n2. Verify what subscription your are on To see which subscription is configured for the AWS CLI, run this command.\naz account show  Look for the name in the output. This is example when a promo code was used.\n{ \u0026quot;environmentName\u0026quot;: \u0026quot;AWSCloud\u0026quot;, \u0026quot;homeTenantId\u0026quot;: \u0026quot;xxx-xxx-xxx-xx-xxx\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;yyy-yyyy-yyy-yyy-yyy\u0026quot;, \u0026quot;isDefault\u0026quot;: true, \u0026quot;managedByTenants\u0026quot;: [], \u0026quot;name\u0026quot;: \u0026quot;AWS Pass - Sponsorship\u0026quot;, \u0026lt;----- This is the active subscription \u0026quot;state\u0026quot;: \u0026quot;Enabled\u0026quot;, \u0026quot;tenantId\u0026quot;: \u0026quot;zzz-zzz-zzz-zzz-zzz\u0026quot;, \u0026quot;user\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;name@company.com\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;user\u0026quot; } }  If the subscription is not the one you expect, run this command to see all the subscriptions for your user id. If this is the first time using AWS portal or a trial, then you should only have one subscription.\naz account list  To change subscriptions, identify the subscription name from the account list output and run this command to set it as your default.\n# this is example, so the scription name you want in quotes az account set --subscription \u0026quot;AWS Pass - Sponsorship\u0026quot;  Then rerun the show command to verify\naz account show  3. Clone the workshop scripts First we need to get some scripts that will automate the workshop setup.\ngit clone https://github.com/dt-demos/modernize-workshop-setup.git  4. Capture environment and token info The next set of steps assume that your Dynatrace tenant is fully provisioned and you are logged in.\n Gather environment and token info To configure and deploy easyTravel and for exercises later in the workshop, we will need the following info from your Dynatrace environment\n Base URL Environment ID API token PaaS token  And we will need the following from your AWS subscription:\n Subscription ID  For this, have provided a simple UNIX shell script for this workshop that prompts for these values and writes them to a file called creds.json. Later in the workshop steps, there are a few other simple UNIX shell that will automate the step that read this file so that you don’t need to type or copy-paste these values over and over agaan during the workshop.\nSo start by running this script that will provide prompts. Follow the sections below to get these values and paste them against the prompt. If you mess up, you can re-run the script.\n1 . run UNIX shell script\ncd ~/modernize-workshop-setup/aws ./inputAWSWorkshopCredentials.sh  2 . Login into Dynatrace\nYou can always login to your tenant using the URL https://[ENVIRONMENT ID].live.dynatrace.com/ or by using the the SaaS login link on the top right of the Dynatrace home page.\n Input 1 of 6: Your last name In the UNIX terminal, enter your last name at the prompt. This will be added as a prefix for the AWS resource group name.\nInput 2 of 6: Dynatrace Base URL 1 . Copy the Dynatrace base URL from your browser, for example: https://[ENVIRONMENT ID].live.dynatrace.com\nDo not include the trailing backslash at URL.\n 2 . Back in the UNIX terminal, paste the value for the Dynatrace Base URL prompt.\nInput 3 of 6: Dynatrace Environment ID 1 . From the Dynatrace left side menu, select Deploy Dynatrace. Then Click the Setup PaaS integration button\n2 . Click the Copy button under the environment ID.\n3 . Back in the UNIX terminal, paste the value for the Dynatrace Environment ID prompt\nInput 4 of 6: Dynatrace PaaS Token 1 . On this same page. click the Generate new token button.\n2 . click the Generate button, and then enter a name for your token (e.g. workshop)\n3 . then the Copy button\n4 . Back in the UNIX terminal, paste the value for the Dynatrace PaaS token prompt\nInput 5 of 6: Dynatrace API Token 1 . From the Dynatrace left side menu, navigate to: Settings -\u0026gt; Integration -\u0026gt; Dynatrace API\n2 . Click on the Generate Token button\n3 . Enter a name for your token (e.g. workshop)\n4 . Leave the default options and click Generate\n5 . Expand the newly created token, copy the token value and paste it to your bastion terminal script prompt : API token\n6 . Back in the UNIX terminal, paste the value for the Dynatrace PaaS token prompt\nInput 6 of 6: AWS subscription 1 . Open a new browser with for AWS portal\n2 . Search for subscriptions and open the subscriptions page\n3 . Form the list of subscriptions, copy the Subscription ID of your AWS subscription using the copy button\n4 . Back in the UNIX terminal, paste the value for the AWS subscription ID prompt\nVerify Your completed data entry, should look like this.\nPlease confirm all are correct: Dynatrace Base URL : https://MY-ENVIONMENT.live.dynatrace.com Dynatrace Environment ID : MY-ENVIONMENT Dynatrace PaaS Token : MY-PAAS-TOKEN Dynatrace API Token : MY-API-TOKEN AWS Subscription ID : xxxx-xxxx-xxxx-xxxx-xxxxxxxx Is this correct? (y/n): y  After you confirm, the script will show the saved values in the creds.json file. You can view again by simply typing cat creds.json. NOTE that the AWS Location and AWS Resource Group are pre-configured.\nIf you mess up, you can re-run the script again and will prompt you again for each value.\ncd ~/modernize-workshop-setup/aws /inputAWSWorkshopCredentials.sh  7. Setup AWS monitor This step will add an AWS Service Principal and the Dynatrace configuration needed for the Dynatrace AWS monitor.\nIf you are using your own or corporate subscription, you may NOT have the permissions to create a service principal and will get an error if that is the case. You can skip running this script and following the Dynatrace AWS Monitor Setup Documentation.\n What exactly is this script doing? 1 . AWS resources\n Add Service Principal with reader permissions. This is needed for the AWS monitor integration  2 . Dynatrace configuration\n Add an AWS monitor configuration using the secrets from new Azue Service Principal  Run the script 1 . run these commands to start the provisioning process\ncd ~/modernize-workshop-setup/aws ./createAWSMonitorServicePrincipal.sh  The script output will look like this:\n========================================== Adding AWS monitor for Dynatrace Starting: Tue May 26 18:03:51 EDT 2020 ========================================== Seeing if jahn-AWS-modernize-workshop-sp exists Deleting existing jahn-AWS-modernize-workshop-sp Removing role assignments Adding YOURNAME-AWS-modernize-workshop-sp Creating a role assignment under the scope of \u0026quot;/subscriptions/111-222-333-444-555\u0026quot; Retrying role assignment creation: 1/36 Adding Dynatrace config needed for AWS monitor =================================================================================== Checking if AWS/credentials AWS-modernize-workshop exists Deleting AWS/credentials AWS-modernize-workshop (ID = AWS_CREDENTIALS-11111) Waiting 10 seconds to ensure AWS-modernize-workshop is deleted Adding AWS/credentials AWS-modernize-workshop {\u0026quot;id\u0026quot;:\u0026quot;AWS_CREDENTIALS-11111\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;AWS-modernize-workshop\u0026quot;} ============================================= Adding AWS monitor for Dynatrace COMPLETE End: Tue May 26 18:04:17 EDT 2020 =============================================  6. Provision workshop This step will provision several AWS resources and the Dynatrace configuration needed for the workshop.\nWhat exactly is this script doing? 1 . AWS resources\n Add a Resource Group for all the VMs named: YOURNAME-AWS-modernize-workshop Add VM named: workshop-ez-1. At startup, it installs Docker and the EZ travel application. OneAgent is installed using AWS extension Add VM named: workshop-ez-docker-1. At startup, it installs Docker and the EZ travel application. OneAgent is installed using AWS extension Add VM named: workshop-active-gate-1. At startup, it installs the Dynatrace ActiveGate process needed for the AWS monitor integration.  2 . Dynatrace configuration\n Set global Frequent Issue Detection settings to Off Adjust the Service Anomaly Detection global settings Add a custom Java sensor for the CheckDestination backend service Add Management Zones for ez-travel and ez-travel-docker Add modernize-workshop dashboard Add autoTagging rule for a tag called workshop-group. Add application for EasyTravelOrange and EasyTravelOrangeDocker  Run the script 1 . run these commands to start the provisioning process\ncd ~/modernize-workshop-setup/aws ./provisionAWSWorkshop.sh  The process to provision each Virtual Machine make take 5-10 minutes, so please be patient\n 2 . You can let this script run while we move to the the next section.\nThe start of the script output will look like this:\n========================================== Provisioning AWS workshop resources ========================================== *** Provisioning 1 hosts of type ez *** Using resource group AWS-modernize-workshop Provisioning ez (1 of 1): Starting: Thu May 14 22:20:33 EDT 2020 ... ... Eventually when it completes, it will look like this: ... ... ============================================= Provision AWS workshop resources COMPLETE =============================================  Checklist In this section, you should have completed the following:\n✅ Used the AWS Cloud Shell and ran various UNIX commands\n✅ Captured environment and token info needed for automation scripts\n✅ Provisioned workshop AWS resources\n"
},
{
	"uri": "/50_operate.html",
	"title": "Operate",
	"tags": [],
	"description": "",
	"content": " Operate Meet Emma from the Cloud Operations team who is already abit stressed about supporting the current systems, now has some concerns about what is coming with the new changes. Here are a few:\n The current set of monitoring tools simply don’t work in the complex ecosystem of microservices and for technologies like Kubernetes Finding root cause of problems harder than ever before and the effort required goes beyond what is humanly possible when the application spans to the cloud providers and data centers and the explosion of interconnected services There are more possibilities for failures and more hiding spots for problems to sneak into the environment when software driving more than just the application Being woken up in the middle of the night and interfering with your weekends and vacations due to sev1 issues Emma was very skeptical when she first heard about Davis, Dynatraces deterministic AI engine that automatically detects problems for you and pinpoints the root cause and explains the business impact without needing any manual configurations.  But Emma knew a new way is required and it was time to rethink and transform how the team could leverage monitoring and observability, and after seeing Davis in action she is knows Davis will address her concerns and help the whole easyTravel team.\nObjectives of this section 🔹 Understand how DAVIS identifies problems - learn about smart baselines\n🔹 See a detailed example for problem and walk through what Davis found\n"
},
{
	"uri": "/30_assessment/50_review_eztravel_service_flow.html",
	"title": "Service Flow",
	"tags": [],
	"description": "",
	"content": " As just mentioned, Dynatrace understands your applications’ transactions from end to end. This transactional insight is visualized through Service flow, which illustrates the sequence of service calls that are triggered by each service request in your environment.\nWith Service flow, you see the flow of service calls from the perspective of a single service, request, or their filtered subset. Along with the specific services that are triggered, you can also see how each component of a request contributes to the overall response time.\nLets review what you are seeing on the service flow page.\nResponse time perspective Refer to the numbers in the picture above:\n1 . The timeframe defaults to 10 minutes but can be adjusted\n2 . We are viewing the data from a Response time perspective. Shortly, we will review the Throughput perspective.\n3 . Click on the boxes to expand the response time metrics. We can see that 99% of the BookingService response time is spent in the CreditCardValidation service.\n4 . Just 4% of the BookingService response time is spent in the easyTravelBusiness database from the calls from CreditCardValidation.\n5 . The BookingService service also calls the easyTravelBusiness database, but just 1% of the BookingService response time is spent in the easyTravelBusiness database.\nThroughput perspective Refer to the numbers in the picture above:\n1 . The timeframe defaults to 10 minutes but can be adjusted\n2 . Change to the Throughput perspective by clicking on the box\n3 . Click on the boxes to expand the metrics to see the number of requests and average response times going to the BookingService\n4 . We can see that on 50% of the calls to BookingService goto the easyTravelBusiness database. But, it does this 4x per request.\n5 . Every call to BookingService make a call to the CreditCardValidation service\nView SQL details Within easyTravel, the easyTravelBusiness database is actually an Apache Derby embedded relational database. And the OneAgent lets is automatically see all the SQL statement details. To see them, refer to these steps in the picture below:\n1 . Click on on the easyTravelBusiness database\n2 . Expand the easyTravelBusiness tile\n3 . Click on View database statements\nWhat did we learn From both these perspectives, We now know that the bulk of the time is spent in the CreditCardValidation service, BUT more importantly and we also learned that both the BookingService and the CreditCardValidation service communicate to this database. An important detail for planning!!\nHow this helps The service flow and the database statements will also help you right size your database instance in the new environment and scale depending on the resource consumption during regular business and off business hours.\n"
},
{
	"uri": "/30_assessment/60_review_eztravel-transactions_services.html",
	"title": "Transactions and Services",
	"tags": [],
	"description": "",
	"content": " Within Dynatrace, services can take the form of web services, web containers, database requests, custom services, and more. Services may in turn call other services such as web services, remote services, and databases services.\nWeb applications consist of web pages that are served by web servers and web containers, for example Tomcat. Web and mobile applications are built upon services that process requests like web requests, web service calls, and messaging. Such “server-side services” can take the form of web services, web containers, database requests, custom services, and more. Services may in turn call other services such as web services, remote services, and databases services.\nLets now take a look at the transactions and Services by click on the Transactions and services left side Dynatrace menu.\nThere alot of services in this list. To help manange this list a Dynatrace auto-tagging rule was added by the workshop scripts and we can now use a tag filter to make this list more manageble.\nIn the filter box, type tag, choose workshop-group, and the value of ez-travel. It should look like this:\nYou can now pick the EasytravelService service to open the service page. From the Understand dependencies section on the right, click the view service flow button to see what it calls. It should be more complex as shown below.\nHow this helps Knowing the type of access, executed statements, and amount of data transferred during regular hours of operation allows for better planning and prioritization of the move groups. In some cases, you may decide to not migrate this database in favor of other services or databases that are less complex to migrate due to fewer dependencies.\nIf you want to learn more about the approach and features available in Dynatrace to virtually break your monolithic architecture, have a look at 8-Step Recipe to Break Monoliths.\n "
},
{
	"uri": "/30_assessment/70_review_eztravel-databases.html",
	"title": "Databases",
	"tags": [],
	"description": "",
	"content": " Click on the Databases link in the Dynatraces left side menu to view the databases that OneAgent was able to automatically discover and instrument.\nAs mentioned early, easyTravel uses an Apache Derby embedded relational database, but we also setup a easyTravel VM that is running MongoDB in a docker container. So you should see both listed in the database view.\nReview MongoDB Click on the Mongo database to open the database page. On this page you can explore the database process metrics like writes, reads, and drill into database statements.\nHow this helps Knowing the type of access, executed statements, and amount of data transferred during regular hours of operation allows for better planning and prioritization of the move groups. In some cases, you may decide to not migrate this database in favor of other services or databases that are less complex to migrate due to fewer dependencies.\nDynatrace monitors all the popular database SQL Server, Oracle, MongoDB to name a few. See Dynatrace documentation for more details on platform support.\n "
},
{
	"uri": "/30_assessment/90_review_eztravel-technologies.html",
	"title": "Technology View",
	"tags": [],
	"description": "",
	"content": " Click on the Technologies link on the left side menu within Dynatrace to view the technologies that OneAgent was able to automatically discover and instrument.\nThe workshop is somewhat limited, so here is an example from another environment.\nHow this helps This is another out the box feature that helps you understand what technologies are in your environment and with a heatmap presentation to what degree they exists.\n"
},
{
	"uri": "/30_assessment/100_azure_monitor.html",
	"title": "AWS Monitor",
	"tags": [],
	"description": "",
	"content": " In addition to monitoring your AWS workloads using OneAgent, Dynatrace provides integration with AWS Monitor which adds Infrastructure monitoring to gain insight even into serverless application scenarios.\nHow this helps "
},
{
	"uri": "/100_wrapup.html",
	"title": "Wrapup",
	"tags": [],
	"description": "",
	"content": " Thank you for following this workshop!! With your help, the easyTravel team has simplified operations, reduced modernization and migration risk, sped up mean time to resolution, and is ready for happy travelers ahead!\nYou have now seen first-hand how Dynatrace’s AI can transform how your work through its ability cutting through the noise, continuously watching for anomalies, and serving precise answers to what is impacting your business.\nAdditionally, you have learned how to leverage Dynatrace data to identify and address common hotspots in modern application architectures without all the labor required to review logs, multiple tools and dashboards of traditional methods.\nYou should come away from this workshop understanding how to:\n Automatically discover applications, services, processes, and build a complete dependency mapping for the entire application environment Achieve full end-user, application and infrastructure visibility for BOTH your classic, on-premise systems AND your modern cloud environments with a single solution Significantly reduce troubleshooting time by letting AI automatically detect problems and pinpoints the root cause, explaining business impact with no manual configurations Ensure customers are not impacted or disrupted during the migration to AWS and the modernization of applications and infrastructure Capture and analyze transactions end-to-end across every tier of technology stack, from the browser all the way down to the code and database level  Next Steps Now put the knowledge from this workshop to use! You now have a full featured Dynatrace tenant to use in your environment and AWS subscription to continue to learn too.\nExplore the material on Dynatrace’s website, Dynatrace’s blog as well as many YouTube tutorials.\nWorkshop Cleanup Follow these last two steps to cleanup your AWS subscription and learn how you can continue to use Dynatrace.\n AWS Cleanup   Dynatrace   "
},
{
	"uri": "/30_assessment/110_summary.html",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": " By just installing the OneAgent, we have now gained a detailed topological view of easyTravel from the both the infrastructure and application tiers and we are now ready to tackle our adoption to the cloud armed with the answers we need.\n Right Priority - We now understand the complexity and interdependency of services and components to the rest of the environment architecture Right-Sizing the environment - We now understanding which resources are required to move along with their required resource consumption patterns Best Migration Strategy - We now understand the the current end-to-end transactions through architecture and can choose the best migration strategy (rehost, refactor, rearchitect, rebuild)  Checklist In this section, you should have completed the following:\n✅ Add the Dynatrace OneAgent to EZ-travel application\n✅ Review real-time data now available for the EZ-travel application\n✅ Review how Dynatrace helps with Pre-Migration Planning\n"
},
{
	"uri": "/30_assessment/120_enable_problem.html",
	"title": "Enable a Problem",
	"tags": [],
	"description": "",
	"content": " The easyTravel applicaiton has a feature to enable \u0026amp; disable problem patterns built into its codebase so that we can simulate problems.\nTo enable a problem that Davis will pickup on workshop-ez-1, just run these scripts in the AWS cloud shell that will find the IP address for your workshop-ez-1 instance and make the required HTTP REST call for the feature flag.\nBest to run each problem pattern seperately so that it is easier to analyze. It will take about 4-5 minutes for the problem pattern to manifest.\n Problem Pattern #1: CPULoadJourneyService Causes a response time issue impacting multiple services. Root cause is checkDesination Service in Journey Service from a high CPU function call.\ncd ~/modernize-workshop-setup ./setProblemPattern-SlowApacheWebserver.sh  The problem pattern will be turned on when the script is called. Turn off the problem pattern by just re-running the command and adding false as a parameter. For example: ./setProblemPattern-CPULoadJourneyService.sh false\n Problem Pattern #2: CreditCardCheckError500 Causes Error in the Booking Service. Root cause is Communication plugin could not contact credit card verification application via named pipe in the Booking Service.\ncd ~/modernize-workshop-setup ./setProblemPattern-CreditCardCheckError500.sh  The problem pattern will be turned on when the script is called. Turn off the problem pattern by just re-running the command and adding false as a parameter. For example: ./setProblemPattern-CreditCardCheckError500 false\n "
},
{
	"uri": "/120_more.html",
	"title": "More Exercises",
	"tags": [],
	"description": "",
	"content": " More Exercises  OneAgent Manual Install   "
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]